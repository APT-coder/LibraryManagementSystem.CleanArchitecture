// <auto-generated />
using System;
using LibraryManagementSystem.Persistence.DatabaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LibraryManagementSystem.Persistence.Migrations
{
    [DbContext(typeof(ConnectionDatabaseContext))]
    partial class ConnectionDatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LibraryManagement.Domain.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Bio = "English novelist, essayist, journalist, and critic.",
                            CreatedDate = new DateTime(2024, 9, 11, 11, 28, 12, 743, DateTimeKind.Utc).AddTicks(2323),
                            DateOfBirth = new DateTime(1903, 6, 25, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "George Orwell"
                        },
                        new
                        {
                            Id = 2,
                            Bio = "British author, best known for the Harry Potter series.",
                            CreatedDate = new DateTime(2024, 9, 11, 11, 28, 12, 743, DateTimeKind.Utc).AddTicks(2331),
                            DateOfBirth = new DateTime(1965, 7, 31, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "J.K. Rowling"
                        },
                        new
                        {
                            Id = 3,
                            Bio = "English writer known for her 66 detective novels.",
                            CreatedDate = new DateTime(2024, 9, 11, 11, 28, 12, 743, DateTimeKind.Utc).AddTicks(2332),
                            DateOfBirth = new DateTime(1890, 9, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Agatha Christie"
                        },
                        new
                        {
                            Id = 4,
                            Bio = "Russian writer, best known for 'War and Peace' and 'Anna Karenina'.",
                            CreatedDate = new DateTime(2024, 9, 11, 11, 28, 12, 743, DateTimeKind.Utc).AddTicks(2365),
                            DateOfBirth = new DateTime(1828, 9, 9, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Leo Tolstoy"
                        },
                        new
                        {
                            Id = 5,
                            Bio = "American writer, humorist, and lecturer, best known for 'The Adventures of Tom Sawyer'.",
                            CreatedDate = new DateTime(2024, 9, 11, 11, 28, 12, 743, DateTimeKind.Utc).AddTicks(2367),
                            DateOfBirth = new DateTime(1835, 11, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Mark Twain"
                        });
                });

            modelBuilder.Entity("LibraryManagement.Domain.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            CreatedDate = new DateTime(2024, 9, 11, 11, 28, 12, 743, DateTimeKind.Utc).AddTicks(3391),
                            Title = "1984"
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 2,
                            CreatedDate = new DateTime(2024, 9, 11, 11, 28, 12, 743, DateTimeKind.Utc).AddTicks(3393),
                            Title = "Harry Potter and the Philosopher's Stone"
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 3,
                            CreatedDate = new DateTime(2024, 9, 11, 11, 28, 12, 743, DateTimeKind.Utc).AddTicks(3394),
                            Title = "Murder on the Orient Express"
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 4,
                            CreatedDate = new DateTime(2024, 9, 11, 11, 28, 12, 743, DateTimeKind.Utc).AddTicks(3395),
                            Title = "War and Peace"
                        },
                        new
                        {
                            Id = 5,
                            AuthorId = 5,
                            CreatedDate = new DateTime(2024, 9, 11, 11, 28, 12, 743, DateTimeKind.Utc).AddTicks(3396),
                            Title = "The Adventures of Tom Sawyer"
                        });
                });

            modelBuilder.Entity("LibraryManagement.Domain.Loan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LoanDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MemberId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("MemberId");

                    b.ToTable("Loans");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 1,
                            CreatedDate = new DateTime(2024, 9, 11, 11, 28, 12, 743, DateTimeKind.Utc).AddTicks(5756),
                            LoanDate = new DateTime(2024, 9, 1, 11, 28, 12, 743, DateTimeKind.Utc).AddTicks(5758),
                            MemberId = 1,
                            ReturnDate = new DateTime(2024, 9, 8, 11, 28, 12, 743, DateTimeKind.Utc).AddTicks(5765)
                        },
                        new
                        {
                            Id = 2,
                            BookId = 2,
                            CreatedDate = new DateTime(2024, 9, 11, 11, 28, 12, 743, DateTimeKind.Utc).AddTicks(5768),
                            LoanDate = new DateTime(2024, 9, 4, 11, 28, 12, 743, DateTimeKind.Utc).AddTicks(5769),
                            MemberId = 2
                        },
                        new
                        {
                            Id = 3,
                            BookId = 3,
                            CreatedDate = new DateTime(2024, 9, 11, 11, 28, 12, 743, DateTimeKind.Utc).AddTicks(5770),
                            LoanDate = new DateTime(2024, 8, 27, 11, 28, 12, 743, DateTimeKind.Utc).AddTicks(5771),
                            MemberId = 3,
                            ReturnDate = new DateTime(2024, 9, 6, 11, 28, 12, 743, DateTimeKind.Utc).AddTicks(5771)
                        },
                        new
                        {
                            Id = 4,
                            BookId = 1,
                            CreatedDate = new DateTime(2024, 9, 11, 11, 28, 12, 743, DateTimeKind.Utc).AddTicks(5772),
                            LoanDate = new DateTime(2024, 9, 8, 11, 28, 12, 743, DateTimeKind.Utc).AddTicks(5772),
                            MemberId = 4
                        },
                        new
                        {
                            Id = 5,
                            BookId = 5,
                            CreatedDate = new DateTime(2024, 9, 11, 11, 28, 12, 743, DateTimeKind.Utc).AddTicks(5773),
                            LoanDate = new DateTime(2024, 8, 22, 11, 28, 12, 743, DateTimeKind.Utc).AddTicks(5774),
                            MemberId = 5,
                            ReturnDate = new DateTime(2024, 9, 9, 11, 28, 12, 743, DateTimeKind.Utc).AddTicks(5774)
                        });
                });

            modelBuilder.Entity("LibraryManagement.Domain.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Members");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 9, 11, 11, 28, 12, 743, DateTimeKind.Utc).AddTicks(4371),
                            Email = "john.doe@example.com",
                            Name = "John Doe"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 9, 11, 11, 28, 12, 743, DateTimeKind.Utc).AddTicks(4374),
                            Email = "jane.smith@example.com",
                            Name = "Jane Smith"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 9, 11, 11, 28, 12, 743, DateTimeKind.Utc).AddTicks(4374),
                            Email = "alice.johnson@example.com",
                            Name = "Alice Johnson"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 9, 11, 11, 28, 12, 743, DateTimeKind.Utc).AddTicks(4375),
                            Email = "bob.williams@example.com",
                            Name = "Bob Williams"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2024, 9, 11, 11, 28, 12, 743, DateTimeKind.Utc).AddTicks(4376),
                            Email = "charlie.brown@example.com",
                            Name = "Charlie Brown"
                        });
                });

            modelBuilder.Entity("LibraryManagement.Domain.Book", b =>
                {
                    b.HasOne("LibraryManagement.Domain.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("LibraryManagement.Domain.Loan", b =>
                {
                    b.HasOne("LibraryManagement.Domain.Book", "Book")
                        .WithMany("Loans")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibraryManagement.Domain.Member", "Member")
                        .WithMany("Loans")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("LibraryManagement.Domain.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("LibraryManagement.Domain.Book", b =>
                {
                    b.Navigation("Loans");
                });

            modelBuilder.Entity("LibraryManagement.Domain.Member", b =>
                {
                    b.Navigation("Loans");
                });
#pragma warning restore 612, 618
        }
    }
}
